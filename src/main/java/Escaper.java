import org.apache.commons.lang3.StringEscapeUtils;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Escaper {
    public static void main(String[] args) throws IOException {
        String s = "<div class=\\\"section\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\"><div class=\\\"titlepage\\\"><div><div><h2 class=\\\"title\\\" style=\\\"clear: both\\\"><a id=\\\"ch03lvl1sec30\\\"></a>Validating the whole entity</h2></div></div><hr /></div><p>In the previous recipe, we <a id=\\\"id166\\\" class=\\\"indexterm\\\"></a>saw how we can validate simple, decoupled properties. In real life, though, there is usually the need to validate properties against each other, or perform some validation that even uses values from outside the validating entity. We will have a look at two different ways to achieve this.</p><div class=\\\"section\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\"><div class=\\\"titlepage\\\"><div><div><h3 class=\\\"title\\\"><a id=\\\"ch03lvl2sec89\\\"></a>Getting ready</h3></div></div></div><p>We will be using NuGet Package Manager to install the Entity Framework Core 1 package, <code class=\\\"literal\\\">Microsoft.EntityFrameworkCore</code>. We will also be using a SQL Server database for storing the data, so we will also need <code class=\\\"literal\\\">Microsoft.EntityFrameworkCore.SqlServer</code>.</p><p>Finally, <code class=\\\"literal\\\">xunit</code> is the package we will be using for the unit tests and <code class=\\\"literal\\\">dotnet-text-xunit</code> adds tooling support for Visual Studio. Note that the <code class=\\\"literal\\\">UnitTests</code> project is a .NET Core App 1.0 (netcoreapp1.0), where <code class=\\\"literal\\\">Microsoft.EntityFrameworkCore.Design</code> is configured as a build dependency and <code class=\\\"literal\\\">Microsoft.EntityFrameworkCore.Tools</code> is set as a tool.</p><p>Open <span class=\\\"strong\\\"><strong>Using EF Core Solution</strong></span> from the included source code examples.</p><p>Execute the database setup script from the code samples included with this recipe. This can be found in the <code class=\\\"literal\\\">DataAccess</code> project within the <code class=\\\"literal\\\">Database</code> folder.</p></div><div class=\\\"section\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\"><div class=\\\"titlepage\\\"><div><div><h3 class=\\\"title\\\"><a id=\\\"ch03lvl2sec90\\\"></a>How to do itâ€¦</h3></div></div></div><p>In this recipe, we'll play a bit with the various forms by which we can validate entities and their properties:</p><div class=\\\"orderedlist\\\"><ol class=\\\"orderedlist arabic\\\" type=\\\"1\\\"><li><p>Add a new C# class named <code class=\\\"literal\\\">Blog</code> with the following code to the <code class=\\\"literal\\\">BusinessLogic</code> project:</p><div class=\\\"informalexample\\\"><pre class=\\\"programlisting\\\">using System.Collections.Generic;\\nusing System.ComponentModel.DataAnnotations;\\nnamespace BusinessLogic\\n{\\n  [BlogValidation]\\n  public class Blog : IValidatableObject\\n  {\\n    public int BlogId { get; set; }\\n    [CustomValidation(typeof(ForbiddenWordsValidator), \\\"IsValid\\\")]\\n    public string Name { get; set; }\\n    public DateTime CreationDate { get; set; }\\n    public string Url { get; set; }\\n    public IEnumerable&lt;ValidationResult&gt; Validate(ValidationContext validationContext)\\n    {\\n      yield return ForbiddenWordsValidator.IsValid(Name);\\n    }\\n  }\\n}</pre></div></li><li><p>Now we will create a validation attribute that will validate the whole entity: create a file named <code class=\\\"literal\\\">BlogValidationAttribute.cs</code> in the <code class=\\\"literal\\\">BusinessLogic</code> project:</p><div class=\\\"informalexample\\\"><pre class=\\\"programlisting\\\">using System;\\nusing System.ComponentModel.DataAnnotations;\\nnamespace BusinessLogic\\n{\\n  [AttributeUsage(AttributeTargets.Class,AllowMultiple = false, Inherited = true)]\\n  public class BlogValidationAttribute :\\n  ValidationAttribute\\n  {\\n    protected override ValidationResult IsValid(object value, ValidationContext validationContext)\\n    {\\n      if (!(value is Blog))\\n      {\\n        return ValidationResult.Success;\\n      }\\n      var blog = (Blog) value;\\n      //TODO: check the blog for invalid values\\n      //for now, let's assume something is wrongwith the name\\n      yield return new ValidationResult(\\\"Invalid name\\\",new [] { \\\"Name\\\" });\\n      //yield return ValidationResult.Success;\\n    }\\n  }\\n}</pre></div></li><li><p>Next, the <code class=\\\"literal\\\">ForbiddenWordsValidator</code> class, also<a id=\\\"id167\\\" class=\\\"indexterm\\\"></a> in <code class=\\\"literal\\\">BusinessLogic</code> project:</p><div class=\\\"informalexample\\\"><pre class=\\\"programlisting\\\">using System;\\nusing System.ComponentModel.DataAnnotations;\\nnamespace BusinessLogic\\n{\\n  public static class ForbiddenWordsValidator\\n  {\\n    public static ValidationResult IsValid(string word)\\n    {\\n      //TODO: check if the word is valid, maybe using a dictionary\\n      //for now, let's assume it isn't valid\\n      return new ValidationResult(\\\"Bad word detected\\\");\\n      //if the word is ok, just return success\\n      //return ValidationResult.Success;\\n    }\\n  }\\n}</pre></div></li><li><p>Finally, create<a id=\\\"id168\\\" class=\\\"indexterm\\\"></a> a new C# class named <code class=\\\"literal\\\">BlogContext</code> with the following code in the <code class=\\\"literal\\\">DataAccess</code> project:</p><div class=\\\"informalexample\\\"><pre class=\\\"programlisting\\\">using System;\\nusing System.ComponentModel.DataAnnotations;\\nusing Microsoft.EntityFrameworkCore;\\nusing Microsoft.EntityFrameworkCore.Infrastructure;\\nusing BusinessLogic;\\nnamespace DataAccess\\n{\\n  public class BlogContext : DbContext\\n  {\\n    private readonly string _connectionString;\\n    public BlogContext(string connectionString)\\n    {\\n      _connectionString = connectionString;\\n    }\\n    public DbSet&lt;Blog&gt; Blogs { get; set; }\\n    protected void ValidateDirtyEntries()\\n    {\\n      var serviceProvider = (this as IAccessor&lt;IServiceProvider&gt;).Service;\\n      var items = new Dictionary&lt;object, object&gt;();\\n      foreach (var entry in ChangeTracker.Entries()\\n      .Where(e =&gt;\\n       (e.State == EntityState.Added) ||\\n        (e.State == EntityState.Modified)))\\n      {\\n        var entity = entry.Entity;\\n        var context = new ValidationContext(entity, serviceProvider, items);\\n        var results = new List&lt;ValidationResult&gt;();\\n        if (Validator.TryValidateObject(entity, context, results, true) == false)\\n        {\\n          foreach (var result in results)\\n          {\\n             if (result != ValidationResult.Success)\\n             {\\n               throw new ValidationException(\\n                result.ErrorMessage);\\n             }\\n           }\\n         }\\n      }\\n    }\\n    protected override void OnConfiguring(\\n    DbContextOptionsBuilder optionsBuilder)\\n    {\\n      optionsBuilder\\n      .UseSqlServer(_connectionString);\\n      base.OnConfiguring(optionsBuilder);\\n    }\\n    public override int SaveChanges()\\n    {\\n      ValidateDirtyEntries();\\n      return base.SaveChanges();\\n    }\\n  }\\n}</pre></div><div class=\\\"note\\\" style=\\\"margin-left: 0.5in; margin-right: 0.5in;\\\"><h3 class=\\\"title\\\"><a id=\\\"note35\\\"></a>Note</h3><p>For Entity Framework 6, replace the namespace <code class=\\\"literal\\\">Microsoft.EntityFrameworkCore</code> for <code class=\\\"literal\\\">System.Data.Entity</code> and call the base constructor of <code class=\\\"literal\\\">DbContext,</code> passing it the connection string. Finally, drop the <code class=\\\"literal\\\">OnConfiguring</code> method.</p></div></li><li><p>We'll add a <a id=\\\"id169\\\" class=\\\"indexterm\\\"></a>unit test in the <code class=\\\"literal\\\">UnitTests</code> project, in a file called <code class=\\\"literal\\\">ValidationTests.cs</code>:</p><div class=\\\"informalexample\\\"><pre class=\\\"programlisting\\\">using Xunit;\\nusing BusinessLogic;\\nusing DataAccess;\\nnamespace UnitTests\\n{\\n  public class ValidationTests : BaseTests\\n  {\\n    [Fact]\\n    public void CanValidateAll()\\n    {\\n      //Arrange\\n      using (var ctx = new BlogContext(\\n      Configuration[\\\"Data:Blog:ConnectionString\\\"]))\\n      {\\n        var blog = new Blog { Name = \\\"A Bad Word\\\" };\\n        //Assert\\n        Assert.ThrowsAny&lt;ValidationException&gt;(() =&gt;\\n        {\\n          ctx.Blogs.Add(blog);\\n          //Act\\n          ctx.SaveChanges();\\n        });\\n      }\\n    }\\n  }\\n}</pre></div></li><li><p>We'll also add the base class <code class=\\\"literal\\\">BaseTests</code>, also in the <code class=\\\"literal\\\">UnitTests</code> project:</p><div class=\"informalexample\"><pre class=\"programlisting\">using Microsoft.Extensions.Configuration;\\nnamespace UnitTests\\n{\\n  public abstract class BaseTests\\n  {\\n    protected BaseTests()\\n    {\\n      var configurationBuilder = new ConfigurationBuilder();\\n      configurationBuilder\\n      .AddJsonFile(\\\"appSettings.json\\\");\\n      Configuration = configurationBuilder.Build();\\n    }\\n    protected IConfiguration Configuration { get; set; }\\n  }\\n}</pre></div></li><li><p>Add the <a id=\\\"id170\\\" class=\\\"indexterm\\\"></a>following connection string to the <code class=\\\"literal\\\">appsettings.json</code> file:</p><div class=\\\"informalexample\\\"><pre class=\" language-markup\" data-code-index=\"6\">{\n" +
                "      \"Data\": {\n" +
                "        \"Blog\": {\n" +
                "            \"ConnectionString\":\"Server=(local)\\\\SQLEXPRESS; Database=Blog; Integrated Security=SSPI; MultipleActiveResultSets=true\"\n" +
                "        }\n" +
                "    }\n" +
                "}</pre></div><div class=\\\"note\\\" style=\\\"margin-left: 0.5in; margin-right: 0.5in;\\\"><h3 class=\\\"title\\\"><a id=\\\"note36\\\"></a>Note</h3><p>For Entity Framework 6, we would add this connection string to the <code class=\\\"literal\\\">Web.config</code> file, under the <code class=\\\"literal\\\">connectionStrings</code> section, with the name <code class=\\\"literal\\\">Blog</code>. Of course, do change the connection string to match your system settings, for example, the name of the SQL Server instance (<code class=\\\"literal\\\">SQLEXPRESS</code>, in this example).</p></div></li></ol></div></div><div class=\\\"section\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\"><div class=\\\"titlepage\\\"><div><div><h3 class=\\\"title\\\"><a id=\\\"ch03lvl2sec91\\\"></a>How it worksâ€¦</h3></div></div></div><p>What we have here are three different validation options:</p><div class=\\\"itemizedlist\\\"><ul type=\\\"bullet\\\"><li style=\\\"list-style-type: disc\\\"><p>The <code class=\\\"literal\\\">BlogValidationAttribute</code>, when applied to the <code class=\\\"literal\\\">Blog</code> class, will perform some custom validation of it (here you have just its skeleton); it has access to all of the public members of the class, and can even change the values, although it is not recommended</p></li><li style=\\\"list-style-type: disc\\\"><p>The implementation of <code class=\\\"literal\\\">IValidatableObject</code>, an interface also coming from <code class=\\\"literal\\\">System.ComponentModel.DataAnnotations</code>, allows a class to validate itself</p></li><li style=\\\"list-style-type: disc\\\"><p>The <code class=\\\"literal\\\">CustomValidationAttribute</code>, in this example applied to the <code class=\\\"literal\\\">Name</code> property of the <code class=\\\"literal\\\">Blog</code> class, will trigger a call to a public static method in the supplied class (<code class=\\\"literal\\\">ForbiddenWordsValidator</code>, whose actual implementation is left as an exercise)</p></li></ul></div><p>Let's analyze each of these options.</p><p>The first one, a <a id=\\\"id171\\\" class=\\\"indexterm\\\"></a>class-level validation attribute, is capable of validating the class as a whole. The problem is that it needs to have knowledge of the class it is pointed to, so that it can look at the appropriate properties. Of course, it can rely on abstract base classes or interfaces, but it still needs to know about them.</p><p>Having the class validate itself is interesting â€“ after all, who knows it best? â€“ except from a reusability point of view: the logic will be inside the class and not really useful outside of it.</p><p>The third option, a generic validation attribute, is useful because we can have a collection of validation methods and reuse them in different places. In this example, the validation attribute is declared on a string property and hence the validation method only knows about strings, but the attribute can also be declared at the class level; in this case, of course, the validation method's argument must be of the right type.</p><p>Note that both<a id=\\\"id172\\\" class=\\\"indexterm\\\"></a> the <code class=\\\"literal\\\">ValidationAttribute</code> derived classes as the <code class=\\\"literal\\\">IValidatableObject</code> and the generic validation method, all return results as <code class=\\\"literal\\\">ValidationResult</code>, where <code class=\\\"literal\\\">ValidationResult.Success</code> always means <span class=\\\"emphasis\\\"><em>is valid</em></span>. The <code class=\\\"literal\\\">Validator</code> class knows how to handle all of these scenarios, which is quite helpful.</p><p>Try to implement the content of <code class=\\\"literal\\\">BlogValidationAttribute</code> and <code class=\\\"literal\\\">ForbiddenWordsValidator</code> and see if you can provide your own validations!</p></div><div class=\\\"section\\\" lang=\\\"en\\\" xml:lang=\\\"en\\\"><div class=\\\"titlepage\\\"><div><div><h3 class=\\\"title\\\"><a id=\\\"ch03lvl2sec92\\\"></a>See also</h3></div></div></div><p>In this chapter:</p><div class=\\\"itemizedlist\\\"><ul type=\\\"bullet\\\"><li style=\\\"list-style-type: disc\\\"><p>\\n<span class=\\\"emphasis\\\"><em>Validating simple properties</em></span>\\n</p></li><li style=\\\"list-style-type: disc\\\"><p>\\n<span class=\\\"emphasis\\\"><em>Validating groups of entities</em></span>\\n</p></li></ul></div></div></div>\n" +
                "</html>";
        System.out.println(s);
        System.out.println("\n\n\n");
        String in = "a\\tb\\n\\\"c\\\"";

        System.out.println("\n\n\n");
        System.out.println(in);
        // a\tb\n\"c\"
        String out = StringEscapeUtils.unescapeJava(in);
        System.out.println(out);
        System.out.println("\n\n\n");
        System.out.println(StringEscapeUtils.unescapeJava(s));

        BufferedReader br = new BufferedReader(new FileReader("tmp.html"));
        try {
            StringBuilder sb = new StringBuilder();
            String line = br.readLine();

            while (line != null) {
                sb.append(line);
                sb.append(System.lineSeparator());
                line = br.readLine();
            }
            String everything = sb.toString();
            System.out.println("\n\n\n");
            System.out.println(everything);
            System.out.println("\n\n\n");
            System.out.println(StringEscapeUtils.unescapeJava(everything));
        } finally {
            br.close();
        }
    }
}
